consumer:
  nameOverride: ""
  fullnameOverride: "consumer"

  replicas: 15

  logstashConfig:
    logstash.yml: |
      http.host: "0.0.0.0"
    pipelines.yml: |
      - pipeline.id: main
        pipeline.batch.size: 1000
        pipeline.batch.delay: 50
        pipeline.ecs_compatibility: disabled
        pipeline.ordered: false
        pipeline.workers: 4
        path.config: "/usr/share/logstash/pipeline/logstash.conf"
        queue.type: memory

  logstashPipeline:
    logstash.conf: |-
      input {
        kafka {
          bootstrap_servers => [ "kafka:9092" ]
          # bootstrap_servers => [ "redpanda:9092" ]
          topics => [ "filebeat" ]
          client_id => "${HOSTNAME}"
          group_id => "consumer"
          auto_offset_reset => "earliest"
          consumer_threads => 4
          decorate_events => false
        }
      }
      output {
        null {}
      }

  logstashPatternDir: "/usr/share/logstash/patterns/"

  logstashPattern: { }

  extraEnvs: [ ]

  envFrom: [ ]

  secrets: [ ]

  secretMounts: [ ]

  hostAliases: [ ]

  image: "docker.elastic.co/logstash/logstash"
  imageTag: "7.17.3"
  imagePullPolicy: "IfNotPresent"
  imagePullSecrets: [ ]

  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9100"
    prometheus.io/path: "/metrics"

  labels: { }

  logstashJavaOpts: "-Xmx8g -Xms8g"

  resources:
    requests:
      cpu: "100m"
      memory: "100Mi"
    limits:
      cpu: "4"
      memory: "8704Mi"

  volumeClaimTemplate:
    accessModes: [ "ReadWriteOnce" ]
    resources:
      requests:
        storage: 1Gi

  rbac:
    create: false
    serviceAccountAnnotations: { }
    serviceAccountName: ""
    annotations: { }

  podSecurityPolicy:
    create: false
    name: ""
    spec:
      privileged: false
      fsGroup:
        rule: RunAsAny
      runAsUser:
        rule: RunAsAny
      seLinux:
        rule: RunAsAny
      supplementalGroups:
        rule: RunAsAny
      volumes:
        - secret
        - configMap
        - persistentVolumeClaim

  persistence:
    enabled: false
    annotations: { }

  extraVolumes: [ ]
  extraVolumeMounts: [ ]
  extraContainers:
    - name: exporter
      image: bitnami/logstash-exporter
      command: [ "logstash_exporter", "--web.listen-address=0.0.0.0:9100" ]
      livenessProbe:
        exec:
          command:
            - sh
            - -c
            - |
              #!/usr/bin/env bash -e
              true
        failureThreshold: 3
        initialDelaySeconds: 1
        periodSeconds: 10
        timeoutSeconds: 5

      readinessProbe:
        exec:
          command:
            - sh
            - -c
            - |
              #!/usr/bin/env bash -e
              true
        failureThreshold: 3
        initialDelaySeconds: 1
        periodSeconds: 10
        timeoutSeconds: 5

  extraInitContainers: [ ]

  priorityClassName: ""

  antiAffinityTopologyKey: "kubernetes.io/hostname"

  antiAffinity: "hard"

  nodeAffinity: { }

  podAffinity: { }

  podManagementPolicy: "Parallel"

  httpPort: 9600

  extraPorts:
    - name: beats
      containerPort: 5044
    - name: logstash
      containerPort: 9600
    - name: exporter
      containerPort: 9100

  updateStrategy: RollingUpdate

  maxUnavailable: 1

  podSecurityContext:
    fsGroup: 1000
    runAsUser: 1000

  securityContext:
    capabilities:
      drop:
        - ALL
    # readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1000

  terminationGracePeriod: 1

  livenessProbe:
    httpGet:
      path: /
      port: http
    initialDelaySeconds: 25
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1

  readinessProbe:
    httpGet:
      path: /
      port: http
    initialDelaySeconds: 25
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 3

  schedulerName: ""

  nodeSelector: { }
  tolerations: [ ]

  lifecycle: { }

  service:
    annotations: { }
    type: ClusterIP
    loadBalancerIP: ""
    ports:
      - name: beats
        port: 5044
        targetPort: 5044
        protocol: TCP
      - name: http
        port: 9600
        targetPort: 9600
        protocol: TCP
      - name: exporter
        port: 9100
        targetPort: 9100
        protocol: TCP

  ingress:
    enabled: false
    annotations: { }
    className: "nginx"
    pathtype: ImplementationSpecific
    hosts: [ ]
    tls: [ ]
